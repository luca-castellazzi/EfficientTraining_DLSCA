import polars as pl


def int_to_hex(int_values):

    """
    Converts int values into hex values, where the eventual 0 in front is explicit.
    To convert a single int value, the input should be a len-1 list.

    Parameters:
        - int_values (np.array or int list): 
            int values to be converted to hex.
  
    Returns:
        - conversion (str or str list): 
            Element-to-element hex-conversion of the input.
            The eventual 0 in front is explicit.
    """

    hex_values = []
    for val in int_values:
        tmp = hex(val).replace('0x', '') # Get rid of '0x' that is generated by the cast to hex
        if len(tmp) == 1:
            tmp = f'0{tmp}' # Add 0 in front of the conversion if its len is 1
        hex_values.append(tmp)
    
    if len(hex_values) == 1:
        conversion = hex_values[0]
    else:
        conversion = hex_values
    
    return conversion


def hex_to_int(hex_str):
    
    """
    Converts the given hex number into a list of int, each one relative to
    a single byte of the input.

    Parameters:
        - hex_str (str):
            hex value to be converted.

    Returns:
        - conversion (int list):
            Conversion of the input to a list of int.
    """

    split_hex_str = [hex_str[i:i+2] for i in range(0, len(hex_str), 2)]
    
    conversion = [int(sb, 16) for sb in split_hex_str]

    return conversion


def to_coords(int_values):
    
    """
    Converts the given int values to coordinates relative to an AES-SBox.
    
    Parameters:
        - int_values (int list):
            Values to be converted.

    Returns:
        - rows, cols (tuple of lists):
             AES-SBox coordinates relative to the given input (rows contains
             the indices for the rows (first 4 bits of each input), cols 
             contains the indices for the columns (last 4 bits of each input)).
    """

    hex_values = int_to_hex(int_values)

    rows = [int(hex_val[0], 16) for hex_val in hex_values]
    cols = [int(hex_val[1], 16) for hex_val in hex_values]

    return rows, cols


def save_csv(data, columns, output_path):
    
    df = pl.DataFrame(
        data=data, 
        columns=columns
    )
    
    df.write_csv(output_path)