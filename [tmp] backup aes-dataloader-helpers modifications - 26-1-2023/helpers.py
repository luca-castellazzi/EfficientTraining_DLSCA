import polars as pl


def int_to_hex(int_val):

    """
    Converts a single int value into hex, where the eventual 0 in front is explicit.

    Parameters:
        - int_val (int): 
            int value to be converted to hex.
  
    Returns:
        - conversion (str): 
            Hex-conversion of the input.
            The eventual 0 in front is explicit.
    """

    conversion = hex(int_val).replace('0x', '') # Get rid of '0x' that is generated by the cast to hex

    if len(conversion) == 1:
        conversion = f'0{conversion}' # Add 0 in front of the conversion if its len is 1

    return conversion


def hex_to_int(hex_val):
    
    """
    Converts a hex number into a list of int, each one relative to a single byte
    of the input.

    Parameters:
        - hex_val (str):
            hex value to be converted.

    Returns:
        - conversion (int list):
            Conversion of the input to a list of int.
    """

    split_hex_str = [hex_val[i:i+2] for i in range(0, len(hex_val), 2)]
    
    conversion = [int(sb, 16) for sb in split_hex_str]

    return conversion


def to_coords(val):
    
    """
    Converts the given int values to coordinates relative to an AES-SBox.
    
    Parameters:
        - int_values (int):
            Value to be converted.

    Returns:
        - row, col (tuple of int):
            AES-SBox coordinates relative to the given input (row is the 
            row-index (first 4 bits of the input), col is the col-index (last 4
            bits of each input)).
    """

    hex_val = int_to_hex(val)

    # A hex byte is a str of exaclty 2 characters:
    # The first is converted into the row index (first 4 bits)
    # The second is converted into the col index (last 4 bits)
    row = int(hex_val[0], 16)
    col = int(hex_val[1], 16)

    return row, col


def save_csv(data, columns, output_path):
    
    df = pl.DataFrame(
        data=data, 
        columns=columns
    )
    
    df.write_csv(output_path)